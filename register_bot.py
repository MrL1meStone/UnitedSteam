import asyncio
import re
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import *

load_dotenv('.gitignore/token.env')

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

class States(StatesGroup):
    none = State()
    nick = State()
    age = State()
    make_request = State()

def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="register")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="members")],
        [InlineKeyboardButton(text="üì® –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="requests")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data="manage_members")],
        [InlineKeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="leave")]
    ])

@dp.message(CommandStart())
@dp.message(Command("menu"))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(States.none)
    await state.update_data(id=message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ *–ü–∞—Ä–æ–≤–æ–π –°–æ—é–∑* üåÅ‚òÅÔ∏è\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º!",
        reply_markup=get_main_menu(),parse_mode="Markdown"
    )

@dp.callback_query(F.data == "register")
async def register(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    await callback.answer()

    if data['id'] != callback.from_user.id:
        await callback.message.answer(f"‚ö†Ô∏è {callback.from_user.first_name}, —Ç—ã –Ω–µ —Ç–æ—Ç, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É")
        return

    if is_member(data["id"]):
        await callback.message.answer(
            "‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É! –ü–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –µ–µ –æ–¥–æ–±—Ä—è—Ç –∏–ª–∏ –µ–µ —É–∂–µ –æ–¥–æ–±—Ä–∏–ª–∏",reply_markup=get_main_menu())
        return

    if is_banned(data["id"]):
        await callback.message.answer('‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∫–ª–∞–Ω–∞')
        return

    await state.set_state(States.nick)
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ Minecraft:")

@dp.message(States.nick)
async def write_nick(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data['id'] != message.from_user.id:
        await message.answer(f"‚ö†Ô∏è {message.from_user.first_name}, —Ç—ã –Ω–µ —Ç–æ—Ç, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É")
        return

    await state.update_data(nick=message.text)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(States.age)

@dp.message(States.age)
async def write_age(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data['id'] != message.from_user.id:
        await message.answer(f"‚ö†Ô∏è {message.from_user.first_name}, —Ç—ã –Ω–µ —Ç–æ—Ç, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É")
        return
    if re.fullmatch(r'^(7|8|9|1\d|2\d|3\d)$', message.text):
        await state.update_data(age=message.text)
        await state.set_state(States.make_request)
        await make_request(message, state)
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä—é —á—Ç–æ —Ç–µ–±–µ –º–µ–Ω—å—à–µ 7 –∏–ª–∏ –±–æ–ª—å—à–µ 39! –ù–∞–ø–∏—à–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.message(States.make_request)
async def make_request(message: Message, state: FSMContext):
    data = await state.get_data()
    new_user(data['id'], data['nick'], data['age'])
    await message.answer(
        "üì© –û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ö–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞, —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üéâ",
        reply_markup=get_main_menu())
    buttons=[]
    for i in return_from('Requests'):
        buttons.append([
            InlineKeyboardButton(text=f'üë§ {i[1]}, {i[2]}', url=f'tg://user/?id={i[0]}')])
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"–ü—Ä–∏–Ω—è—Ç—å{i[0]}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å{i[0]}")
        ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    for admin in return_from('Admins'):
        await bot.send_message(chat_id=admin,text="üì® –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö: ",reply_markup=keyboard)
    await state.set_state('none')

@dp.callback_query(F.data == "members")
async def show_members(callback: CallbackQuery) -> None:
    await callback.answer()
    buttons = []
    for member in return_from('Members'):
        buttons.append([InlineKeyboardButton(text=f"üë§ {member['nick']}", url=f'tg://user/?id={member['id']}')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–ª–∞–Ω–∞:", reply_markup=keyboard)

@dp.callback_query(F.data == "requests")
async def show_requests(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    buttons = []
    for request in return_from('Requests'):
        buttons.append([
            InlineKeyboardButton(text=f'üë§ {request['nick']}, {request['age']}', url=f'tg://user/?id={request['id']}')])
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"–ü—Ä–∏–Ω—è—Ç—å{request['id']}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å{request['id']}")
        ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    if buttons:
        await callback.message.answer("üì® –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–æ–∫ –Ω–µ—Ç")

@dp.callback_query(F.data.startswith('–ü—Ä–∏–Ω—è—Ç—å'))
async def accept_request(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    user_id = callback.data[7:]
    make_member(user_id)
    await bot.send_message(
        chat_id=user_id,
        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
             "–ú—ã —Å—Ç—Ä–æ–∏–º –≤–æ–∑–¥—É—à–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö üó∫Ô∏è: *-1930 1070*\n"
             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∞—Ä–æ–≤–æ–π –°–æ—é–∑! üåÅ‚òÅÔ∏è\n"
             "[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∫–ª–∞–Ω–∞ —Ç—É—Ç](https://t.me/+UkFBTi_5J89lNGNi)",
        parse_mode="Markdown"
    )
    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞")

@dp.callback_query(F.data.startswith('–û—Ç–∫–ª–æ–Ω–∏—Ç—å'))
async def decline_request(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    user_id = callback.data[9:]
    remove_member(user_id)
    await bot.send_message(chat_id=user_id, text="üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

@dp.callback_query(F.data == "manage_members")
async def manage_members(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return

    keyboard=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üö™ –í—ã–≥–Ω–∞—Ç—å", callback_data='show_members_to_fire')],
        [InlineKeyboardButton(text=f"‚õî –ó–∞–±–∞–Ω–∏—Ç—å", callback_data='show_members_to_ban')]])

    await callback.message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

@dp.callback_query(F.data == "show_members_to_fire")
async def fire_member(callback: CallbackQuery) -> None:
    buttons = []
    for member in return_from('Members'):
        buttons.append([InlineKeyboardButton(text=f"üö™ –í—ã–≥–Ω–∞—Ç—å {member['nick']}", callback_data=f'fire{member['id']}')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("‚ùì –ö–æ–≥–æ –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞?", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("fire"))
async def fire_member(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    user_id = callback.data[4:]
    remove_member(user_id)
    await bot.send_message(chat_id=user_id, text="üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞")
    await callback.message.answer("üëã –ò–≥—Ä–æ–∫ –±—ã–ª –≤—ã–≥–Ω–∞–Ω")

@dp.callback_query(F.data == "manage_admins")
async def manage_admins(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    buttons = [
        [InlineKeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")],
        [InlineKeyboardButton(text="‚ûñ –°–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏:", reply_markup=keyboard)

@dp.callback_query(F.data == "add_admin")
async def add_admin_menu(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return

    buttons = []
    for i in return_from('Members'):
        if i[0] not in return_from('Admins'):
            buttons.append([InlineKeyboardButton(text=f"üë§ {i[1]}", callback_data=f'admin{i[0]}')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üëë –ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞?", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("admin"))
async def op_member(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    user_id = callback.data[5:]
    if int(user_id) not in return_from('Admins'):
        make_admin(user_id)
        await bot.send_message(chat_id=user_id, text="üé© –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –ø–æ–≤—ã—Å–∏–ª–∏ –¥–æ –∞–¥–º–∏–Ω–∞!")
        await callback.message.answer("‚úÖ –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ –¥–æ –∞–¥–º–∏–Ω–∞")
    else:
        await callback.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")

@dp.callback_query(F.data == "remove_admin")
async def deop(callback: CallbackQuery) -> None:
    await callback.answer()
    if not is_admin(callback.from_user.id):
        await callback.message.answer(f'‚õî –ò–∑–≤–∏–Ω–∏ {callback.from_user.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    remove_admin(callback.from_user.id)
    await callback.message.answer("üëã –í—ã —Å–Ω—è–ª–∏ —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")

@dp.callback_query(F.data == "leave")
async def leave(callback: CallbackQuery) -> None:
    await callback.answer()
    remove_member(callback.from_user.id)
    await callback.message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞")

async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())